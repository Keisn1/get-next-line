#+title: Readme
#+startup: overview

* Table of contents :TOC:
- [[#get_next_line][get_next_line]]
  - [[#prototype][prototype]]
  - [[#return-value][return value]]
  - [[#behavior][behavior]]
  - [[#undefined-behavior][undefined behavior]]
  - [[#not-allowed---lseek-and-global-variables][not allowed - lseek and global variables]]
- [[#static-variables][static variables]]
  - [[#what-are-static-variables-in-c][what are static variables in c?]]
  - [[#what-are-they-used-for-in-this-project][what are they used for in this project]]
- [[#file-descriptor][file descriptor]]
  - [[#file-status-flags-some][file status flags (some)]]
- [[#read][read]]
  - [[#return-value-1][return value]]
  - [[#nbr-of-bytes-smaller-then-nbr-of-bytes-requested][nbr of bytes smaller then nbr of bytes requested]]
  - [[#buffer-size-and-count][Buffer size and count]]
- [[#compilation][Compilation]]
  - [[#flag--d-buffer_sizexx][Flag: -D BUFFER_SIZE=xx]]
  - [[#what-is-the-d-flag][what is the D flag]]
  - [[#compilation-1][compilation]]
- [[#testing][Testing]]
  - [[#todo][TODO]]

* get_next_line
** prototype
=int get_next_line(int fd, char **line);=
- fd: file descriptor for reading
- line: value of what has been read
** return value
|  1 | A line has been read |
|  0 | EOF has been reached |
| -1 | An error occured     |
** behavior
- returns a line read from a file descriptor, without the newline
- read as little as possible
- newline marks the end of a read: return the current line
** undefined behavior
- same file descriptor switches to a different file before EOF, before EOF has been reached for the first fd
- reading from a binary file
  - can be made coherent, if you wish to
** not allowed - lseek and global variables
lseek is not allowed
global variables are not allowed
* static variables
** what are static variables in c?

In C, static variables are variables that maintain their value between function calls and have a scope that is either limited to the file or the block in which they are declared. They are declared using the =static= keyword. There are two primary contexts in which static variables can be used:

1. *Static Local Variables*:
   - Declared inside a function.
   - Retain their value between function calls.
   - Scope is limited to the function in which they are declared.

   #+begin_src c
   #include <stdio.h>

   void counter() {
       static int count = 0;  // Static local variable
       count++;
       printf("Count: %d\n", count);
   }

   int main() {
       counter();  // Output: Count: 1
       counter();  // Output: Count: 2
       counter();  // Output: Count: 3
       return 0;
   }
   #+end_src

2. *Static Global Variables*:
   - Declared outside of all functions, typically at the top of a file.
   - Accessible only within the file where they are declared.
   - Can be used to restrict the visibility of a variable to the file scope, which is useful for creating private data that should not be accessible from other files.

   #+begin_src c
// File1.c
static int counter = 0;  // Static global variable
void incrementCounter() {
	counter++;
}
int getCounter() {
	return counter;
}
   #+end_src
   #+begin_src c
// File2.c
#include <stdio.h>

extern void incrementCounter();
extern int getCounter();

int main() {
	incrementCounter();
	incrementCounter();
	printf("Counter: %d\n", getCounter());  // Output: Counter: 2
	return 0;
}
   #+end_src

   In summary, static variables in C help manage data persistence and visibility, making them useful for stateful operations within functions or for restricting global variable access to a single file.

** what are they used for in this project
- they are probably used for the filedescriptor
* file descriptor
- small, nonnegative integer
- reference to an open file description
  - uneffected if pathname is changed
- index to an entry in the process's table of open file descriptors
- return value of *open*
- used in system calls like: *read*, *write*, *lseek*, *fcntl*
- records *file offset* and *file status flags*
- The argument flags must include  one  of  the  following  access  modes:
  - O_RDONLY
  - O_WRONLY
  - O_RDWR
** file status flags (some)
*** =O_RDONLY=:
Open for reading only
*** =O_WRONLY=:
Open for writing only
*** =O_RDWR=:
Open for reading and writing
*** =O_CREAT=:
Create the file if it does not exist
*** =O_APPEND=:
All writes will be appended to the end of the file
*** =O_SYNC=:
Write operations are synchronized, meaning changes are flushed to the underlying storage device immediately
*** =O_CLOEXEC=:
Close the file descriptor when a new program is executed using one of the =exec= family of functions
*** =O_EXCL=:
Exclusive use flag, when used with =O_CREAT=, will cause the call to fail if the file already exists
*** =O_TRUNC=:
Truncate the file to zero length if it already exists
* read

=ssize_t read(int fd, void buf[.count], size_t count);=
** return value
- success
  - number of bytes read is returned
  - file position is advanced by this number
  - 0 means end of file
- error
  - =-1= is returned
  - =errno= set to indicate the error
  - unspecified if file position changed
** nbr of bytes smaller then nbr of bytes requested
- not an error
- maybe fewer bytes available or interrupted by signal
** Buffer size and count
- If count is zero, read() may detect the errors described below.
- In  the absence  of any errors, or if read() does not check for errors, a read() with a count of 0 returns zero and has no other effects.
- According to POSIX.1, if count is greater than SSIZE_MAX, the result is *implementation-defined*; see NOTES for the upper limit on Linux.
- on my system, the ~ssize_type~ is defined via ~__ssize_t~, which in turn is defined as ~__SWORD_TYPE~ which is a ~long int~
  #+begin_src c
# define __SWORD_TYPE		long int
#define __SSIZE_T_TYPE		__SWORD_TYPE
__STD_TYPE __SSIZE_T_TYPE __ssize_t; /* Type of a byte count, or error.  */
typedef __ssize_t ssize_t;
  #+end_src
* Compilation
** TODO Flag: -D BUFFER_SIZE=xx
- used for the buffer size for the read calls
- will be modified and played around with
- [ ] buffer = 1
- [ ] buffer = 9999
- [ ] buffer = 10000000
** what is the D flag
The =-D= flag in C compilation is used to define a macro during compilation.

** compilation
- with gcc apparently
#+begin_src shell
gcc -Wall -Wextra -Werror -D BUFFER_SIZE=32 get_next_line.c get_next_line_utils.c
#+end_src

* Testing
** TODO
- [ ] Reading from a file
- [ ] Reading from stdin
- [ ] Reading from redirection
- [ ] sending a newline to standard-output
- [ ] CTRL-D
